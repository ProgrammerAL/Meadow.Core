//
//
//
//      Message encoders and decoders.
//
//      *************************** WARNING ***************************
//
//      THIS FILE IS AUTOMATICALLY GENERATED.  DO NOT EDIT THIS FILE AS
//      CHANGES WILL BE OVERWRITTEN.
//
//      *************************** WARNING ***************************
//

using System;

namespace Meadow.Devices.Esp32.MessagePayloads //Meadow.Hardware.Coprocessor.MessagePayloads
{
    public struct SystemConfiguration
    {
        public UInt32 MessageSize;
    };

    public struct WiFiConfiguration
    {
        public Byte AutomaticReconnect;
        public UInt32 MaximumRetryCount;
        public Byte Antenna;
        public Byte MaximumMessageQueueLength;
    };

    public struct WiFiCredentials
    {
        public String NetworkName;
        public String Password;
    };

    public struct AntennaInfo
    {
        public Byte Antenna;
    };

    public struct AccessPoint
    {
        public string Ssid;
        public Byte[] Bssid;
        public Byte PrimaryChannel;
        public Byte SecondaryChannel;
        public sbyte Rssi;
        public Byte AuthenticationMode;
        public UInt32 Protocols;
    };

    public struct AccessPointList
    {
        public UInt32 NumberOfAccessPoints;
        public UInt32 AccessPointsLength;
        public byte[] AccessPoints;
    };

    public struct SockAddr
    {
        public Byte Length;
        public Byte Family;
        public Byte[] Data;
    };

    public struct AddrInfo
    {
        public UInt32 MyHeapAddress;
        public Int32 Flags;
        public Int32 Family;
        public Int32 SocketType;
        public Int32 Protocol;
        public UInt32 AddrLen;
        public UInt32 AddrLength;
        public byte[] Addr;
        public String CanonName;
        public UInt32 Next;
    };

    public struct GetAddrInfoRequest
    {
        public String NodeName;
        public String ServName;
        public UInt32 HintsLength;
        public byte[] Hints;
        public UInt32 ResultLength;
        public byte[] Result;
    };

    public struct GetAddrInfoResponse
    {
        public Int32 AddrInfoResponseErrno;
        public UInt32 ResLength;
        public byte[] Res;
    };

    public struct SocketRequest
    {
        public UInt32 AddressInformation;
        public Int32 Domain;
        public Int32 Type;
        public Int32 Protocol;
    };

    public struct IntegerResponse
    {
        public Int32 Result;
    };

    public struct IntegerAndErrnoResponse
    {
        public Int32 Result;
        public Int32 ResponseErrno;
    };

    public struct ConnectRequest
    {
        public Int32 SocketHandle;
        public UInt32 AddrLength;
        public byte[] Addr;
        public Int32 AddrLen;
    };

    public struct FreeAddrInfoRequest
    {
        public UInt32 AddrInfoAddress;
    };

    public struct TimeVal
    {
        public UInt32 TvSec;
        public UInt32 TvUsec;
    };

    public struct SetSockOptRequest
    {
        public Int32 SocketNumber;
        public Int32 Level;
        public Int32 OptionName;
        public UInt32 OptionValueLength;
        public byte[] OptionValue;
        public Int32 OptionLen;
    };

    public struct Linger
    {
        public Int32 LOnOff;
        public Int32 LLinger;
    };

    public struct WriteRequest
    {
        public Int32 SocketHandle;
        public UInt32 BufferLength;
        public byte[] Buffer;
        public Int32 Count;
    };

    public struct ReadRequest
    {
        public Int32 SocketHandle;
        public Int32 Count;
    };

    public struct ReadResponse
    {
        public UInt32 BufferLength;
        public byte[] Buffer;
        public Int32 ReadResponseResult;
        public Int32 ReadResponseErrno;
    };

    public struct CloseRequest
    {
        public Int32 SocketHandle;
    };

    public struct GetBatteryChargeLevelResponse
    {
        public UInt32 Level;
    };

}
